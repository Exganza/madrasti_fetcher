#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Feb 08, 2021 09:54:12 PM +03  platform: Windows NT
# -*- coding: utf-8 -*-
from logging import disable
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options
import chromedriver_autoinstaller


import time
import pandas as pd
from datetime import timedelta
from datetime import datetime
# import tkinter as tk
import tkinter as tk
from tkinter import messagebox, DISABLED, NORMAL, simpledialog
from tkinter.filedialog import askopenfilename
import sys
import os


#Driver setup

#Driver setup
path = "driver/config.csv"
if not os.path.exists(path):
    data={
        "username":[],
        "password":[],
        "late_time":[]
    }
    df = pd.DataFrame(data=data)
    df.to_csv("driver/config.csv", encoding="utf-8-sig", index=False)




import madrasti_fetcher_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    madrasti_fetcher_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    madrasti_fetcher_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def donate(self):
      
        window = tk.Toplevel()
        window.geometry("290x294+688+270")
        window.minsize(148, 1)
        window.maxsize(1684, 1025)
        window.resizable(1, 1)
        window.title("BuY me A COFFEE!")
        window.configure(background="#d9d9d9")
        window.iconbitmap("driver/icon-rules-book-96.ico")
        
        self.Btndonate = tk.Button(window)
        self.Btndonate.place(relx=-0.034, rely=-0.035, height=303, width=306)
        self.Btndonate.configure(activebackground="#ececec")
        self.Btndonate.configure(activeforeground="#000000")
        self.Btndonate.configure(background="#d9d9d9")
        self.Btndonate.configure(disabledforeground="#a3a3a3")
        self.Btndonate.configure(foreground="#000000")
        self.Btndonate.configure(highlightbackground="#d9d9d9")
        self.Btndonate.configure(highlightcolor="black")
        global _img22
        _img22 = tk.PhotoImage(file="driver/qr.png")
        self.Btndonate.configure(image=_img22)
        self.Btndonate.configure(pady="0")
        self.Btndonate.configure(relief="flat")
        self.Btndonate.configure(command=window.destroy)

    
    def startapp(self):
        global driver, late_time
        # messagebox.showerror("xx","errrrrrrrrrrrrr")
        self.Btnstart["state"] = DISABLED
        self.Btnkillchrome["state"] = NORMAL
        self.Btngheyab["state"] = NORMAL
        self.Btnaddgeyab["state"] = NORMAL
        self.Btnhw["state"] = NORMAL
        self.Btnactive["state"] = NORMAL
        
        caps = DesiredCapabilities().CHROME
        caps["pageLoadStrategy"] = "normal"
        options = Options()
        options.add_argument("--log-level=3")
        chromedriver_autoinstaller.install(True)  # install driver
        driver = webdriver.Chrome(options=options, desired_capabilities=caps)
        # driver = webdriver.Chrome(options=options, desired_capabilities=caps, executable_path='driver/chromedriver.exe')
        driver.implicitly_wait(30)
        base_url = "https://www.google.com/"
        verificationErrors = []
        accept_next_alert = True

        df_settings = pd.read_csv("driver/config.csv")
        username = str(df_settings.iloc[0,0])
        password = str(df_settings.iloc[0,1])
        late_time = df_settings.iloc[0,2]

        if username == " " and password == " ":
            driver.get("https://schools.madrasati.sa/")
        else:
            driver.get("https://schools.madrasati.sa/")
            time.sleep(4)
            # Login
            driver.find_element_by_xpath("//*[@id='Beneficiaries']/div/div[1]/div[2]/a/div/div").click()
            driver.find_element_by_id("i0116").send_keys(username)
            time.sleep(1)
            driver.find_element_by_id("idSIButton9").click()
            time.sleep(1)
            driver.find_element_by_id("i0118").send_keys(password)
            time.sleep(1)
            driver.find_element_by_id("idSIButton9").click()
            time.sleep(1)
            driver.find_element_by_id("idSIButton9").click()
    
    
    def settings(self):
        _username_get = simpledialog.askstring("اعدادات","ادخل البريد الالكتروني لحسابك في منصة مدرستي:")
        _username = [_username_get]
        if _username_get == None:
            pass
        else:
            _password_get = simpledialog.askstring("اعدادات","ادخل كلمة المرور", show="*")
            _password = [_password_get]
            if _password_get == None:
                pass
            else:
                _late_time_get = simpledialog.askstring("اعدادات","يرصد للطالب (تأخر) اذا مر على زمن الحصة الدراسية (ضع الرقم بالدقائق)")
                if _late_time_get == "" or (_late_time_get == None) or len(_late_time_get) > 2:
                    _late_time_get = "15"
                _late_time = [_late_time_get]
                
                if (_username_get == "") or (_password_get == ""):
                    _username = " "
                    _password = " "
                    
                if (_username_get == None) or (_password_get == None):
                    pass
                else:
                    data={
                        "username":_username,
                        "password":_password,
                        "late_time":_late_time
                    }
                    df_settings = pd.DataFrame(data)
                    df_settings.to_csv("driver/config.csv", encoding = "UTF-8-sig", index = False)
                    messagebox.showinfo("رسالة","تم حفظ الاعدادات بنجاح.")
        
    
    def reformat_time(self):
        # Clean DF for reformat Time
        df = pd.DataFrame()
        file_path = askopenfilename(title="choose a file", initialdir="Downloads", filetype=[("Csv file","*.csv")])
        df = pd.read_csv(f"{file_path}", sep="\t" ,encoding="utf-16le", engine="python")
        df.reset_index(inplace=True)
        df.columns = ["Full Name","User Action","Timestamp"]
        # print(df)
        # df = pd.read_clipboard()
        clean_df = pd.DataFrame(columns=["Full Name", "User Action", "Timestamp"])
        # clean_df.columns= ["Full Name", "User Action", "Timestamp"]
        stud_names = df["Full Name"].tolist()
        stud_names = set(stud_names)

        df = df.drop(df[df["User Action"] == "left"].index)
        df = df.drop(df[df["User Action"] == "تمت المغادرة من قبل"].index)
        
        # remove teacher name from list
        for student in stud_names:
            temp = df.loc[df['Full Name'] == student]
            clean_df = clean_df.append(temp.iloc[:1])

        # Clean TimeStamp and assign AM_PM
        timestamp = clean_df["Timestamp"].tolist()
        timestamp_sep = [elm.split() for elm in timestamp]
        am_pm = timestamp_sep[0][2]
        if am_pm == "ص":
            am_pm = "AM"
        elif am_pm == "م":
            am_pm = "PM"
        student_timestamp = [elm[1] for elm in timestamp_sep]
         
        student_timestamp = [elm[0:5] for elm in student_timestamp]
        
        err_time = student_timestamp[0]
        if err_time[-1] == ":":
            student_timestamp = ["0" + elm[0:4] + " " + am_pm for elm in student_timestamp]
            # student_timestamp = ["0"+elm[0] for elm in student_timestamp]
        
        student_timestamp = [elm[0:5] + " " + am_pm for elm in student_timestamp]

        
        # if len(student_timestamp[0]) == 4:
        #     student_timestamp = ["0"+elm[0] for elm in student_timestamp]
        # print(class_time)
        
        # if len(student_timestamp[0]) == 4:
        #     h=student_timestamp[0]
        #     if int(h[0]) < 9:
        #         student_timestamp = [str(int(elm[0]) + 12)+elm[1:] for elm in student_timestamp]
        #     elif int(h[0]) == 9 :
        #         student_timestamp = ["0"+elm[0] for elm in student_timestamp]
            
        clean_df["Timestamp"] = student_timestamp
        return clean_df

        # Clean DF for reformat Time


    def absents_process(self):
        
        date = datetime.now().strftime("%Y-%m-%d")
        ask = ""
        df_late = pd.DataFrame()
        absent_list_studs = []
        late_list_studs = []
        late_time_studs = []
        late_join_time_studs = []
        file_is_incorrect = True
        while file_is_incorrect:
            copy_incorrect = True
            while copy_incorrect:
                try:
                    # ask = messagebox.askokcancel("تجهيز البيانات", "اختر ملف التحضير تيمز واضغط موافق، لالغاء العملية اختر الغاء")
                    # if ask == False:
                    #     break
                    
                    attend_df = self.reformat_time()
                    # print(attend_df)
                    copy_incorrect = False
                except:
                    # print("❌ BE SURE TO COPY ALL -3- Columns .. Try again\n")
                    # messagebox.showerror("تحذير","تأكد من نسخ الأعمدة بشكل صحيح .. حاول مرة اخرى ❌")
                    copy_incorrect = True
                    break

            if copy_incorrect == True:
                break
            
            # get Class time
            class_name_get = driver.find_element_by_xpath("//*[@class='col-md-5 text-primary text-right']/label[1]")
            shoba_name_get = driver.find_element_by_xpath("//*[@class='col-md-5 text-primary text-right']/label[2]")
            class_name = class_name_get.get_attribute('innerHTML')
            shoba_name = shoba_name_get.get_attribute('innerHTML')


            
            class_time_get = driver.find_element_by_xpath("//*[@class='time']")
            class_time = class_time_get.get_attribute("outerHTML")
            class_time = class_time.split()
            if class_time[6] == "ص":
                am_pm = "AM"
            else:
                am_pm = "PM"
            class_time = class_time[5]
            class_time = class_time + " " + am_pm
            
            
            # attend LIST ready
            attend_list = attend_df["Full Name"].tolist()
            attend_list = set(attend_list)
            attend_list = [student_name.split() for student_name in attend_list]
            attend_list = [student_name[0] + " " + student_name[-1] for student_name in attend_list]
            attend_df["Full Name"] = attend_list

            page_incorrect = True
            while page_incorrect:
                try:
                    list_name = []
                    for elem in driver.find_elements_by_xpath('.//*[@class="Maintdtitle"]'):
                        list_name.append(elem.text)
                    page_incorrect = False
                except:
                    # print("❌ Wrong Page .. try again\n")
                    messagebox.showerror(" رسالة خطأ","الصفحة خاطئة .. توجه لصفحة تحضير الطلاب وحاول مرة اخرى ❌")

            student_class = [student_name.split() for student_name in list_name]
            student_class = [student_name[0] + " " + student_name[-1] for student_name in student_class]

            # Chick if the data are correct.
            stud_count = 0
            for i in range(5):
                if attend_list[i] in student_class:
                    stud_count += 1

            if stud_count >= 4:
                file_is_incorrect = False
                # print("✅ Data imported Successfully")
                messagebox.showinfo(" رسالة","رائع تم سحب البيانات بنجاح .. انقر لتحضير الطلاب ✅")
            else:
                # print("❌ Wrong file! .. Try again\n")
                messagebox.showerror(" رسالة خطأ","ملف الشعبة غير صحيح .. حاول مرة اخرى ❌")

        # ##DELETE LATER
        # _ = input("ALL EXIST _ PRESS")

        # for i in range(len(student_class)):
        #     drop = Select(driver.find_element_by_xpath(f'.//*[@id="List_{i}__AttendStatusId"]'))
        #     drop.select_by_index(0)
        # ## DELETE LATER   
        if copy_incorrect == True:
            # exit the function
            pass
        else:
            

            for i in range(len(student_class)):
                if student_class[i] in attend_list:
                    # stu_attend_time
                    # print(student_class[i])
                    row = attend_df[attend_df["Full Name"] == student_class[i]]
                    # print(row)
                    data_row= row.Timestamp
                    data_row = data_row.values
                    stu_attend_time = data_row[0]
                    # stu_attend_time_h=
                    # stu_attend_time_m=
                    # print(stu_attend_time)

                    # Diff time between Class Time and student attend time in MIN
                    # current_time = timedelta(hours=int(class_time[0:2]), minutes=int(class_time[3:5]))
                    # stud_time = timedelta(hours=int(stu_attend_time[0:2]), minutes=int(stu_attend_time[3:5]))
                    # diff_time = stud_time - current_time
                    # diff_time_min = diff_time.total_seconds() / 60
                    fmt="%I:%M %p"
                    diff_time_min = datetime.strptime(stu_attend_time, fmt) - datetime.strptime(class_time, fmt)
                    diff_time_min = diff_time_min.total_seconds() / 60
                    
                    
                    
                    # print(diff_time_min)

                    if int(diff_time_min) > int(late_time):
                        # تسجيل حاضر متأخر
                        drop = Select(driver.find_element_by_xpath(f'.//*[@id="List_{i}__AttendStatusId"]'))
                        drop.select_by_index(3)
                        # Lists for late students
                        late_list_studs.append(list_name[i])
                        late_join_time_studs.append(stu_attend_time)
                        late_time_studs.append(diff_time_min)
                    else:
                        # تسجيل حاضر
                        drop = Select(driver.find_element_by_xpath(f'.//*[@id="List_{i}__AttendStatusId"]'))
                        drop.select_by_index(0)

                else:
                    # تسجيل غياب
                    drop = Select(driver.find_element_by_xpath(f'.//*[@id="List_{i}__AttendStatusId"]'))
                    drop.select_by_index(2)
                    #lists for absents
                    absent_list_studs.append(list_name[i])
                    
            real_late_studs_count = len(late_list_studs)
            real_absent_studs_count = len(absent_list_studs)
            
            if len(absent_list_studs) > len(late_list_studs):
                extra_lines = len(absent_list_studs) - len(late_list_studs)
                for i in range(extra_lines):
                    late_list_studs.append(" ")
                    late_join_time_studs.append(" ")
                    late_time_studs.append(" ")
            
            if len(late_list_studs) > len(absent_list_studs):
                extra_lines = len(late_list_studs) - len(absent_list_studs)
                for i in range(extra_lines):
                    absent_list_studs.append(" ")
            
            
            #Get date from PAGE
            elem = driver.find_element_by_xpath('.//*[@id="lblDay"]')
            pg_today = elem.get_attribute("innerHTML")
            
            date_infilename = pg_today.replace("/", "_")
            # df_absents[f"{shoba_name} - الطلاب المتغيبين"] = absent_list_studs
            new_row = pd.DataFrame({f"{shoba_name} - ({real_late_studs_count}) الطلاب المتأخرين":f'{date}',
                                    'بداية الدرس':' ',
                                    'زمن الدخول':' ',
                                    'التأخر بالدقائق':' ',
                                    f'({real_absent_studs_count}) الطلاب المتغيبين':f'{date}'},
                                    index =[0])
            
            df_late[f"{shoba_name} - ({real_late_studs_count}) الطلاب المتأخرين"] = late_list_studs
            df_late["بداية الدرس"] = class_time
            df_late["زمن الدخول"] = late_join_time_studs
            df_late["التأخر بالدقائق"] = late_time_studs
            df_late[f"({real_absent_studs_count}) الطلاب المتغيبين"] = absent_list_studs
            df_late = pd.concat([new_row, df_late]).reset_index(drop = True)
            # df_absents.to_csv(f"الغياب-{shoba_name}-{class_name}.csv", encoding= "UTF-8-sig")
            df_late.to_csv(f"تقرير الحضور-{shoba_name}-{date_infilename}-{class_name}.csv", encoding= "UTF-8-sig")

            # print("DONE 👍\n\n")
            messagebox.showinfo(" رسالة","- 👍 تم تحضير الطلاب بنجاح وحفظ ملف التقرير .. لاتنسى نقر زر حفظ بالمنصة")
            ask = messagebox.askyesno("رسالة","هل تريد اضافة البيانات في كشف متابعة حضور الطلاب ؟")
            if ask == True:
                list_absent_motaba = []
                shoba_name = simpledialog.askinteger("اسم الشعبة","لاضافة البيانات في كشف متابعة حضور الطلاب، ادخل رقم الشعبة")
                df_absent = pd.read_csv(f'كشوف/شعبة {shoba_name} - حضور.csv')
                if len(df_absent) == 0:
                    df_absent["اسم الطالب"] = list_name
                
                
                #fill absent list with " "
                for i in range(len(list_name)):
                    list_absent_motaba.append(" ")
                    
                for i in range(len(list_name)):
                    elem = driver.find_element_by_xpath(f'.//*[@id="List_{i}__AttendStatusId"]')
                    state = elem.get_attribute('value')
                    list_absent_motaba[i] = state
                
                for i in range(len(list_absent_motaba)):
                    if list_absent_motaba[i] == "0":
                        list_absent_motaba[i] = "ح"
                    elif list_absent_motaba[i] == "1":
                        list_absent_motaba[i] = "غ بعذر"
                    elif list_absent_motaba[i] == "2":
                        list_absent_motaba[i] = "غ"
                    elif list_absent_motaba[i] == "3":
                        list_absent_motaba[i] = "ت"
                    elif list_absent_motaba[i] == "4":
                        list_absent_motaba[i] = "ت بعذر"
                
                
                # elem = driver.find_element_by_xpath('.//*[@id="lblDay"]')
                # pg_today = elem.get_attribute("innerHTML")
                        
                df_absent[f"{pg_today}"] = list_absent_motaba
                df_absent.to_csv(f"كشوف/شعبة {shoba_name} - حضور.csv", encoding= "UTF-8-sig", index = False)
            else:
                pass
            
    
    def addgeyab(self):
        ask = messagebox.askokcancel("رسالة", "هل تريد اضافة الغياب لكشف المتابعة مباشرة ؟ توجه للصفحة وابدا")
        if ask == False:
            pass
        else:
            # Get names From page
            page_incorrect = True
            while page_incorrect:
                try:
                    list_name = []
                    for elem in driver.find_elements_by_xpath('.//*[@class="Maintdtitle"]'):
                        list_name.append(elem.text)
                    page_incorrect = False
                except:
                    # print("❌ Wrong Page .. try again\n")
                    messagebox.showerror(" رسالة خطأ","الصفحة خاطئة .. توجه لصفحة تحضير الطلاب وحاول مرة اخرى ❌")
                    
            list_absent_motaba = []
            shoba_name = simpledialog.askinteger("اسم الشعبة","لاضافة البيانات في كشف متابعة حضور الطلاب، ادخل رقم الشعبة")
            df_absent = pd.read_csv(f'كشوف/شعبة {shoba_name} - حضور.csv')
            if len(df_absent) == 0:
                df_absent["اسم الطالب"] = list_name
            
            # NOT WORK AFTER WebSite Last Update in 3-2-2021
            #fill absent list with " "
            # for i in range(len(list_name)):
            #     list_absent_motaba.append(" ")
                
            # for i in range(len(list_name)):
            #     elem = driver.find_element_by_xpath(f'.//*[@id="List_{i}__AttendStatusId"]')
            #     state = elem.get_attribute('value')
            #     list_absent_motaba[i] = state
                
            elms = driver.find_elements_by_class_name('form-control')
            for l in elms:
                state = l.get_attribute('value')
                list_absent_motaba.append(state)
            
            
            for i in range(len(list_absent_motaba)):
                if list_absent_motaba[i] == "0":
                    list_absent_motaba[i] = "ح"
                elif list_absent_motaba[i] == "1":
                    list_absent_motaba[i] = "غ بعذر"
                elif list_absent_motaba[i] == "2":
                    list_absent_motaba[i] = "غ"
                elif list_absent_motaba[i] == "3":
                    list_absent_motaba[i] = "ت"
                elif list_absent_motaba[i] == "4":
                    list_absent_motaba[i] = "ت بعذر"
            
                
                elem = driver.find_element_by_xpath('.//*[@id="lblDay"]')
                pg_today = elem.get_attribute("innerHTML")
                        
                df_absent[f"{pg_today}"] = list_absent_motaba
                df_absent.to_csv(f"كشوف/شعبة {shoba_name} - حضور.csv", encoding= "UTF-8-sig", index = False)

            
    def home_work(self):
        ask = ""
        date = datetime.now().strftime("%Y-%m-%d")
        result = pd.DataFrame()
        list_name = []
        list_hw= []
        list_mark = []
        ask = messagebox.askokcancel("تجهيز البيانات", "توجه لصفحة الواجب المراد حفظه واضغط موافق، لالغاء العملية اختر الغاء")
        
        if ask == False:
            # exit from function
            pass
        else:
            shoba_name = simpledialog.askstring("رقم الشعبة","الرجاء ادخال رقم الشعبة لهذه الصفحة")
            try:
                driver.switch_to.window(window_name=driver.window_handles[1])
                time.sleep(1)
                
                #get home work title
                elem = driver.find_element_by_xpath('.//*[@class="col-md-10"]')
                hw_title = elem.get_attribute("innerHTML")
                hw_title = hw_title.split()
                hw_title = " ".join(hw_title)
                
                for elem in driver.find_elements_by_xpath('.//span[@class="Maintdtitle"]'):
                    list_name.append(elem.text)
                            
                for elem in driver.find_elements_by_xpath('.//span[@class="smalldata"]'):
                    list_hw.append(elem.text)
                    
                for i in list_hw:
                    index = list_hw.index(i)
                    if i != 'استعراض الحل' and len(i) <= 12:
                        del list_hw[index]

                for i in list_hw:
                    if i == 'استعراض الحل':
                        index = list_hw.index(i)
                        list_hw[index] = 'تم حل الواجب'


                for i in list_hw:  #تنظيف اسم الشعبة
                    index = list_hw.index(i)
                    if i != 'تم حل الواجب' or i != 'لم يتم حل الواجب':
                        del list_hw[index]
                        
                #fill mark list with ZERO
                for i in range(len(list_name)):
                    list_mark.append(0)
                    
                for i in range(len(list_name)):
                    if list_hw[i] == 'تم حل الواجب':
                        elem = driver.find_element_by_xpath(f'.//*[@id="List_{i}__Grade"]')
                        mark = elem.get_attribute('value')
                        list_mark[i] = mark

                result["اسم الطالب"] = list_name
                result["حالة الواجب"] = list_hw
                result["درجة الواجب"] = list_mark

                # print(list_name, len(list_name))
                
                # print(list_hw, len(list_hw))
                
                # print(list_mark, len(list_mark))
                
                driver.close()
                driver.switch_to.window(window_name=driver.window_handles[0])
                result.to_csv(f"واجب-{hw_title}-شعبة {shoba_name}-{date}.csv", encoding = "UTF-8-sig")
                
                # print("DONE 👍\n\n")
                messagebox.showinfo("رسالة",f"👍 رائع تم حفظ التقرير لواجب {hw_title} بنجاح")
                ask = messagebox.askyesno("رسالة","هل تريد اضافة البيانات في كشف متابعة واجبات الطلاب ؟")
                if ask == True:
                    list_hw_motaba = []
                    list_hw_motaba_last = []
                    df_absent = pd.read_csv(f'كشوف/شعبة {shoba_name} - حضور.csv')
                    df_hw = pd.read_csv(f'كشوف/شعبة {shoba_name} - واجبات.csv')
                    
                    main_names = df_absent["اسم الطالب"].tolist()
                    
                    if len(df_hw) == 0:
                        df_hw["اسم الطالب"] = main_names
                        # df_hw["اسم الطالب"] = list_name
                        
                    
                    #fill hw list with " "
                    for i in range(len(list_name)):
                        list_hw_motaba.append(str(list_hw[i]) + " " + str(list_mark[i]))
                    
                    dictionary = dict(zip(list_name, list_hw_motaba))
                    
                    for i in range(df_hw.shape[0]):
                        name_foucs = df_hw.at[i,"اسم الطالب"]
                        for x in list_name:
                            match=len([matched for matched in x.split() if matched in name_foucs.split()]) 
                            if match >=3:
                                list_hw_motaba_last.append(dictionary[x])
                                break
                            
                            if x == list_name[-1]:
                                list_hw_motaba_last.append("X")
                            
                    # df_hw[f"{hw_title}"] = list_hw_motaba
                    df_hw[f"{hw_title}"] = list_hw_motaba_last
                    df_hw.to_csv(f"كشوف/شعبة {shoba_name} - واجبات.csv", encoding= "UTF-8-sig", index = False)
                    
                    
                    
                else:
                    pass
                
            
            except:
                messagebox.showerror(" رسالة خطأ","الصفحة خاطئة .. توجه لصفحة الواجب وحاول مرة اخرى ❌")

    
    def activities(self):
        ask = ""
        date = datetime.now().strftime("%Y-%m-%d")
        result = pd.DataFrame()
        list_name = []
        list_hw= []
        list_mark = []
        ask = messagebox.askokcancel("تجهيز البيانات", "توجه لصفحة النشاط المراد حفظه واضغط موافق، لالغاء العملية اختر الغاء")
        
        if ask == False:
            # exit from function
            pass
        else:
            shoba_name = simpledialog.askstring("رقم الشعبة","الرجاء ادخال رقم الشعبة لهذه الصفحة")
            try:
                driver.switch_to.window(window_name=driver.window_handles[1])
                time.sleep(1)
                
                #get home work title
                elem = driver.find_element_by_xpath('.//*[@class="col-md-10"]')
                hw_title = elem.get_attribute("innerHTML")
                hw_title = hw_title.split()
                hw_title = " ".join(hw_title)
                
                for elem in driver.find_elements_by_xpath('.//span[@class="Maintdtitle"]'):
                    list_name.append(elem.text)
                            
                for elem in driver.find_elements_by_xpath('.//span[@class="smalldata"]'):
                    list_hw.append(elem.text)
                    
                for i in list_hw:
                    index = list_hw.index(i)
                    if i != 'تحميل' and len(i) <= 12:
                        del list_hw[index]

                for i in list_hw:
                    if i == 'تحميل':
                        index = list_hw.index(i)
                        list_hw[index] = 'تم حل النشاط'
                        
                #fill mark list with ZERO
                for i in range(len(list_name)):
                    list_mark.append(0)
                    
                for i in range(len(list_name)):
                    if list_hw[i] == 'تم حل النشاط':
                        elem = driver.find_element_by_xpath(f'.//*[@id="List_{i}__Grade"]')
                        mark = elem.get_attribute('value')
                        list_mark[i] = mark

                result["اسم الطالب"] = list_name
                result["حالة النشاط"] = list_hw
                result["درجة النشاط"] = list_mark

                # print(list_name, len(list_name))
                
                # print(list_hw, len(list_hw))
                
                # print(list_mark, len(list_mark))
                
                driver.close()
                driver.switch_to.window(window_name=driver.window_handles[0])
                result.to_csv(f"نشاط-{hw_title}-شعبة {shoba_name}-{date}.csv", encoding = "UTF-8-sig")
                
                # print("DONE 👍\n\n")
                messagebox.showinfo("رسالة",f"👍 رائع تم حفظ التقرير لنشاط {hw_title} بنجاح")
                
                ask = messagebox.askyesno("رسالة","هل تريد اضافة البيانات في كشف متابعة انشطة الطلاب ؟")
                if ask == True:
                    list_activity_motaba = []
                    list_activity_motaba_last = []
                    df_absent = pd.read_csv(f'كشوف/شعبة {shoba_name} - حضور.csv')

                    df_activity = pd.read_csv(f'كشوف/شعبة {shoba_name} - انشطة.csv')
                    main_names = df_absent["اسم الطالب"].tolist()
                    
                    if len(df_activity) == 0:
                        # df_activity["اسم الطالب"] = list_name
                        df_activity["اسم الطالب"] = main_names
                        
                    
                    #fill hw list with " "
                    for i in range(len(list_name)):
                        list_activity_motaba.append(str(list_hw[i]) + " " + str(list_mark[i]))
                    
                    dictionary = dict(zip(list_name, list_activity_motaba))
                    
                    for i in range(df_activity.shape[0]):
                        name_foucs = df_activity.at[i,"اسم الطالب"]
                        for x in list_name:
                            match=len([matched for matched in x.split() if matched in name_foucs.split()]) 
                            if match >=3:
                                list_activity_motaba_last.append(dictionary[x])
                                break
                            
                            if x == list_name[-1]:
                                list_activity_motaba_last.append("X")

                    df_activity[f"{hw_title}"] = list_activity_motaba_last
                    df_activity.to_csv(f"كشوف/شعبة {shoba_name} - انشطة.csv", encoding= "UTF-8-sig", index = False)
                else:
                    pass
                
            except:
                messagebox.showerror(" رسالة خطأ", "الصفحة خاطئة .. توجه لصفحة الواجب وحاول مرة اخرى ❌" )


    def killchrome(self):
        self.Btnstart["state"] = NORMAL
        self.Btnkillchrome["state"] = DISABLED
        self.Btngheyab["state"] = DISABLED
        self.Btnaddgeyab["state"] = DISABLED
        self.Btnhw["state"] = DISABLED
        self.Btnactive["state"] = DISABLED
        # driver.close()
        driver.quit()
        
        
    def kshoof(self):
        path = "كشوف/"
        path = os.path.realpath(path)
        os.startfile(path)
        if len(os.listdir('كشوف/') ) == 0:
        # Directory is empty
            self.Btnprepkshoof["state"] = NORMAL
        else:    
            # Directory is not empty
            self.Btnprepkshoof["state"] = DISABLED


    def prepkshoof(self):
        if len(os.listdir('كشوف/') ) == 0:
            # Directory is empty
            data = {'اسم الطالب':[' ']}
            df_shoab_perpare = pd.DataFrame(data)
            shoab_list = []
            shoab_count = simpledialog.askinteger("تجهيز الكشوف", "ادخل عدد الشعب التي تقوم بتدريسها.") 
            if shoab_count == None:
                pass
            else:     
                for i in range(shoab_count):
                    shoba_name = simpledialog.askinteger("تجهيز الكشوف","ادخل رقم الشعبة")
                    shoab_list.append(shoba_name)
                
                for shoba in shoab_list:
                    df_shoab_perpare.to_csv(f"كشوف/شعبة {shoba} - حضور.csv", encoding= "UTF-8-sig", index = False)
                    df_shoab_perpare.to_csv(f"كشوف/شعبة {shoba} - واجبات.csv", encoding= "UTF-8-sig", index = False)
                    df_shoab_perpare.to_csv(f"كشوف/شعبة {shoba} - انشطة.csv", encoding= "UTF-8-sig", index = False)
                
                messagebox.showinfo("رسالة", "تم تجهيز كشوفات لجميع الشعب بنجاح.")
                self.Btnprepkshoof["state"] = DISABLED
        else:    
            # Directory is not empty
            messagebox.showerror("رسالة", "لتهيئة الكشوف من جديد يرجى مسح كافة الملفات السابقة في مجلد كشوف")
            self.Btnprepkshoof["state"] = DISABLED
        

    
    def btnquit(self):
        try:
            driver.quit()
        except:
            pass
        
        root.destroy()
       

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 7"

        top.geometry("342x368+623+210")
        top.minsize(148, 1)
        top.maxsize(1684, 1025)
        top.resizable(1, 1)
        top.title("1.0.11 مدرستي فيتشر")
        top.configure(background="#d9d9d9")
        top.iconbitmap("driver/icon-rules-book-96.ico")

        # setting Button
        self.Btnsettings = tk.Button(top)
        self.Btnsettings.place(relx=0.058, rely=0.027, height=53, width=66)
        self.Btnsettings.configure(activebackground="#ececec")
        self.Btnsettings.configure(activeforeground="#000000")
        self.Btnsettings.configure(background="#ffffff")
        # self.Btnsettings.configure(cursor="fleur")
        self.Btnsettings.configure(disabledforeground="#a3a3a3")
        self.Btnsettings.configure(foreground="#000000")
        self.Btnsettings.configure(highlightbackground="#d9d9d9")
        self.Btnsettings.configure(highlightcolor="black")
        self.Btnsettings.configure(pady="0")
        # self.Btnsettings.configure(relief="flat")
        self.Btnsettings.configure(text='''اعدادات 🔻''')
        self.Btnsettings.configure(command=self.settings)
        
        # KSHOOF Button
        self.Btnkshoof = tk.Button(top)
        self.Btnkshoof.place(relx=0.058, rely=0.217, height=53, width=66)
        self.Btnkshoof.configure(activebackground="#ececec")
        self.Btnkshoof.configure(activeforeground="#000000")
        self.Btnkshoof.configure(background="#ffffff")
        # self.Btnkshoof.configure(cursor="fleur")
        self.Btnkshoof.configure(disabledforeground="#a3a3a3")
        self.Btnkshoof.configure(foreground="#000000")
        self.Btnkshoof.configure(highlightbackground="#d9d9d9")
        self.Btnkshoof.configure(highlightcolor="black")
        self.Btnkshoof.configure(pady="0")
        # self.Btnkshoof.configure(relief="flat")
        self.Btnkshoof.configure(text=''' كشوف ✅''')
        self.Btnkshoof.configure(command=self.kshoof)
        
        # Prepare KSHOOF Button
        self.Btnprepkshoof = tk.Button(top)
        self.Btnprepkshoof.place(relx=0.058, rely=0.435, height=53, width=66)
        self.Btnprepkshoof.configure(activebackground="#ed8c85")
        self.Btnprepkshoof.configure(activeforeground="#000000")
        self.Btnprepkshoof.configure(background="#ed8c85")
        # self.Btnprepkshoof.configure(cursor="fleur")
        self.Btnprepkshoof.configure(disabledforeground="#a3a3a3")
        self.Btnprepkshoof.configure(foreground="#000000")
        self.Btnprepkshoof.configure(highlightbackground="#d9d9d9")
        self.Btnprepkshoof.configure(highlightcolor="black")
        self.Btnprepkshoof.configure(pady="0")
        # self.Btnprepkshoof.configure(relief="flat")
        self.Btnprepkshoof.configure(text=''' تهيئة\nالكشوف ''')
        self.Btnprepkshoof.configure(command=self.prepkshoof)
        
        
        # Quit Button
        self.Btnquit = tk.Button(top)
        self.Btnquit.place(relx=0.058, rely=0.652, height=53, width=66)
        self.Btnquit.configure(activebackground="#ececec")
        self.Btnquit.configure(activeforeground="#000000")
        self.Btnquit.configure(background="#ffffff")
        # self.Btnquit.configure(cursor="fleur")
        self.Btnquit.configure(disabledforeground="#a3a3a3")
        self.Btnquit.configure(foreground="#000000")
        self.Btnquit.configure(highlightbackground="#d9d9d9")
        self.Btnquit.configure(highlightcolor="black")
        self.Btnquit.configure(pady="0")
        # self.Btnquit.configure(relief="flat")
        self.Btnquit.configure(text=''' اغلاق ''')
        self.Btnquit.configure(command=self.btnquit)
        
        
        # Start Button
        self.Btnstart = tk.Button(top)
        self.Btnstart.place(relx=0.292, rely=0.027, height=53, width=200)
        self.Btnstart.configure(activebackground="#ececec")
        self.Btnstart.configure(activeforeground="#000000")
        self.Btnstart.configure(background="#d9d9d9")
        self.Btnstart.configure(disabledforeground="#a3a3a3")
        self.Btnstart.configure(foreground="#000000")
        self.Btnstart.configure(highlightbackground="#d9d9d9")
        self.Btnstart.configure(highlightcolor="black")
        self.Btnstart.configure(pady="0")
        self.Btnstart.configure(text='''منصة مدرستي ( ابدا )''')
        self.Btnstart.configure(command=self.startapp)
        
        # Kill CHrome Button
        self.Btnkillchrome = tk.Button(top)
        self.Btnkillchrome.place(relx=0.292, rely=0.027, height=23, width=22)
        self.Btnkillchrome.configure(activebackground="#ececec")
        self.Btnkillchrome.configure(activeforeground="#ffffff")
        self.Btnkillchrome.configure(background="#fdfdfd")
        self.Btnkillchrome.configure(disabledforeground="#a3a3a3")
        self.Btnkillchrome.configure(foreground="#000000")
        self.Btnkillchrome.configure(highlightbackground="#d9d9d9")
        self.Btnkillchrome.configure(highlightcolor="black")
        self.Btnkillchrome.configure(state = "disabled")
        self.Btnkillchrome.configure(pady="0")
        self.Btnkillchrome.configure(text='''X''')
        self.Btnkillchrome.configure(command=self.killchrome)
        
        # Gheyab Button
        self.Btngheyab = tk.Button(top)
        self.Btngheyab.place(relx=0.292, rely=0.217, height=53, width=196)
        # self.Btngheyab.place(relx=0.205, rely=0.217, height=53, width=196)
        self.Btngheyab.configure(activebackground="#ececec")
        self.Btngheyab.configure(activeforeground="#000000")
        self.Btngheyab.configure(background="#d9d9d9")
        self.Btngheyab.configure(disabledforeground="#a3a3a3")
        self.Btngheyab.configure(foreground="#000000")
        self.Btngheyab.configure(highlightbackground="#d9d9d9")
        self.Btngheyab.configure(highlightcolor="black")
        self.Btngheyab.configure(state = "disabled")
        self.Btngheyab.configure(pady="0")
        self.Btngheyab.configure(text='''رصد الغياب''')
        self.Btngheyab.configure(command=self.absents_process)
        
        # add Geyab Button
        self.Btnaddgeyab = tk.Button(top)
        self.Btnaddgeyab.place(relx=0.292, rely=0.217, height=23, width=22)
        self.Btnaddgeyab.configure(activebackground="#ececec")
        self.Btnaddgeyab.configure(activeforeground="#ffffff")
        self.Btnaddgeyab.configure(background="#fdfdfd")
        self.Btnaddgeyab.configure(disabledforeground="#a3a3a3")
        self.Btnaddgeyab.configure(foreground="#000000")
        self.Btnaddgeyab.configure(highlightbackground="#d9d9d9")
        self.Btnaddgeyab.configure(highlightcolor="black")
        self.Btnaddgeyab.configure(state = "disabled")
        self.Btnaddgeyab.configure(pady="0")
        self.Btnaddgeyab.configure(text='''+''')
        self.Btnaddgeyab.configure(command=self.addgeyab)
        
        # HomeWork Button
        self.Btnhw = tk.Button(top)
        self.Btnhw.place(relx=0.292, rely=0.435, height=53, width=196)
        self.Btnhw.configure(activebackground="#ececec")
        self.Btnhw.configure(activeforeground="#000000")
        self.Btnhw.configure(background="#d9d9d9")
        self.Btnhw.configure(disabledforeground="#a3a3a3")
        self.Btnhw.configure(foreground="#000000")
        self.Btnhw.configure(highlightbackground="#d9d9d9")
        self.Btnhw.configure(highlightcolor="black")
        self.Btnhw.configure(state = "disabled")
        self.Btnhw.configure(pady="0")
        self.Btnhw.configure(text='''تقارير الواجبات''')
        self.Btnhw.configure(command=self.home_work)
        # Activity Button
        self.Btnactive = tk.Button(top)
        self.Btnactive.place(relx=0.292, rely=0.652, height=53, width=196)
        self.Btnactive.configure(activebackground="#ececec")
        self.Btnactive.configure(activeforeground="#000000")
        self.Btnactive.configure(background="#d9d9d9")
        self.Btnactive.configure(disabledforeground="#a3a3a3")
        self.Btnactive.configure(foreground="#000000")
        self.Btnactive.configure(highlightbackground="#d9d9d9")
        self.Btnactive.configure(highlightcolor="black")
        self.Btnactive.configure(state = "disabled")
        self.Btnactive.configure(pady="0")
        self.Btnactive.configure(text='''تقارير الأنشطة''')
        self.Btnactive.configure(command=self.activities)
        # Label Name
        self.Lblname = tk.Label(top)
        self.Lblname.place(relx=0.117, rely=0.87, height=26, width=262)
        self.Lblname.configure(background="#d9d9d9")
        # self.Lblname.configure(cursor="fleur")
        self.Lblname.configure(disabledforeground="#a3a3a3")
        self.Lblname.configure(font=font9)
        self.Lblname.configure(foreground="#000000")
        self.Lblname.configure(text='''Ziad Aqbawi ~~ Exganza[at]gmail.com''')
        # Label school
        self.Lblimam = tk.Label(top)
        self.Lblimam.place(relx=0.117, rely=0.924, height=26, width=254)
        self.Lblimam.configure(background="#d9d9d9")
        self.Lblimam.configure(disabledforeground="#a3a3a3")
        self.Lblimam.configure(font=font9)
        self.Lblimam.configure(foreground="#000000")
        self.Lblimam.configure(text='''Imam Abdullah Bin Saud ~~ JEDDAH''')
        
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
                
        self.menubar.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=self.donate,
                foreground="#000000",
                label="Donate")
        # self.Btnsettings.configure(command=self.donate)
        if len(os.listdir('كشوف/') ) == 0:
            # Directory is empty
            self.Btnprepkshoof["state"] = NORMAL
        else:    
            # Directory is not empty
            self.Btnprepkshoof["state"] = DISABLED
        
if __name__ == '__main__':
    vp_start_gui()



